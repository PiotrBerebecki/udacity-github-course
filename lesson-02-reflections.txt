## Q&A ##

Q: What happens when you initialize a repository? Why do you need to do it?

  A hidden .git folder is created when the command "git init" is executed. The presence of the git repository is needed for recording all the commits in the working directory.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

  * The staging area contains the file or (logically-related) files that are ready to be committed (for tracking) to the git repository.
  * The working directory contains all the files - those about to be committed and those that are not yet ready for committing to the repository of the project.

Q: How can you use the staging area to make sure you have one commit per logical change?

  Use staging area to see differences between previously committed files and current work ('git diff --staged') and make sure that only one logical change is introduced per one commit.
  
Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  Branches based on the master branch (production quality, always works, never breaks) are helpful when making experimental changes or when exploring other solutions (content switching) without touching any of the content of the actual master branch. For example:
  * master | main branch
  * development | new features
  * experiment | experimental features, may often break

Q: How do the diagrams help you visualize the branch structure?

  * Graphically representing the branch structure of a repository helps to identify commits that are reachable and unreachable.
  * The graphical representation also helps in identifying the relationships of the different branches with respect to the master (or production) branch.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  * Merging two branches together combines changes into one single master branch node.
  * The commit histories of the two branches are combined. When displayed using "git log", the commit history are displayed in proper time sequence.

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
  
  Pros:
  * full control over source code
  Cons:
  * potentially time-consuming
  * prone to bugs

----------

## Commands ##

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository.   
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.